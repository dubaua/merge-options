{"version":3,"file":"merge-options.min.mjs","sources":["../merge-options.js"],"sourcesContent":["function isObject(value) {\r\n  return value !== null && typeof value === 'object' && Array.isArray(value) === false;\r\n}\r\n\r\n/**\r\n * @typedef {Object} DefaultOption\r\n * @property {*} initial - Initial value for fallback if user option fail validation\r\n * @property {string} description - Validator description for human\r\n * @property {function} validator - Function for validating user option. Should return boolean value\r\n */\r\n\r\n/**\r\n * @typedef {Object} requiredArguments\r\n * @property {Object.<string, DefaultOption>} defaults - default options object each key contains an object with initial value, validator and description\r\n * @property {Object} [userOptions={}] - user options needs validation before merge\r\n * @property {String} [warnPreffix] - string before warning message, useful to pass name of tool\r\n * @property {String} [warnSuffix] - string after warning message, useful to pass link to documentation\r\n */\r\n\r\n/**\r\n * Merges given user options passed validation and defaults to target object\r\n * Shows warning if given option is invalid\r\n * @param {...requiredArguments} config - confuguration object\r\n * @return {Object} an object with all keys described in defaults with userOption values if they pass validation\r\n */\r\n\r\nfunction mergeOptions({ defaults, userOptions = {}, warnPreffix = '', warnSuffix = '' }) {\r\n  if (!isObject(defaults)) {\r\n    throw new TypeError(`Expected defaults is required not null, not array object, got ${typeof defaults} ${defaults}`);\r\n  }\r\n\r\n  Object.keys(defaults)\r\n    .map(key => ({ key, option: defaults[key] }))\r\n    .forEach(({ key, option }) => {\r\n      if (!isObject(option)) {\r\n        throw new TypeError(`Expected each default option is an object, got ${key} is ${typeof option} ${option}`);\r\n      }\r\n\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'initial')) {\r\n        throw new TypeError(`Expected ${key} have initial property`);\r\n      }\r\n\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'description')) {\r\n        throw new TypeError(`Expected ${key} have description property`);\r\n      }\r\n\r\n      const { description } = option;\r\n      if (typeof description !== 'string') {\r\n        throw new TypeError(`Expected ${key} description is a string, got ${typeof description} ${description}`);\r\n      }\r\n\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'validator')) {\r\n        throw new TypeError(`Expected ${key} have validator property`);\r\n      }\r\n\r\n      const { validator } = option;\r\n      if (typeof validator !== 'function') {\r\n        throw new TypeError(`Expected ${key} validator is a function, got ${typeof validator} ${validator}`);\r\n      }\r\n    });\r\n\r\n  if (!isObject(userOptions)) {\r\n    throw new TypeError(\r\n      `Expected userOptions is required not null, not array object, got ${typeof userOptions} ${userOptions}`,\r\n    );\r\n  }\r\n\r\n  if (warnPreffix !== undefined && typeof warnPreffix !== 'string') {\r\n    throw new TypeError(`Expected warnPreffix is optional string, got ${typeof warnPreffix} ${warnPreffix}`);\r\n  }\r\n\r\n  if (warnSuffix !== undefined && typeof warnSuffix !== 'string') {\r\n    throw new TypeError(`Expected warnSuffix is optional string, got ${typeof warnSuffix} ${warnSuffix}`);\r\n  }\r\n\r\n  const willReturn = {};\r\n  // iterate over defaults to merge only trusted options\r\n  for (const optionName in defaults) {\r\n    const { initial, description, validator } = defaults[optionName];\r\n    // assing initial value first\r\n    willReturn[optionName] = initial;\r\n    // if this option passed\r\n    if (Object.prototype.hasOwnProperty.call(userOptions, optionName)) {\r\n      const userValue = userOptions[optionName];\r\n      // if option valid, reassign it\r\n      if (validator(userValue)) {\r\n        willReturn[optionName] = userValue;\r\n      } else {\r\n        // otherwise print what's wrong ang give clues\r\n        console.warn(\r\n          warnPreffix,\r\n          `Expected ${optionName} is ${description}, got ${typeof userValue} ${userValue}.`,\r\n          `Fallback to default value ${initial}.`,\r\n          warnSuffix,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return willReturn;\r\n}\r\n\r\nexport default mergeOptions;\r\n"],"names":["isObject","value","Array","isArray","ref","defaults","TypeError","Object","keys","map","key","option","forEach","prototype","hasOwnProperty","call","description","validator","userOptions","undefined","warnPreffix","warnSuffix","willReturn","const","optionName","initial","userValue","console","warn"],"mappings":"AAAA,SAASA,EAASC,UACC,OAAVA,GAAmC,iBAAVA,IAA+C,IAAzBC,MAAMC,QAAQF,kBAyBtE,SAAsBG,mDAA0B,uCAAkB,yCAAiB,KAC5EJ,EAASK,SACN,IAAIC,kFAAkFD,MAAYA,MAG1GE,OAAOC,KAAKH,GACTI,aAAIC,cAAUA,EAAKC,OAAQN,EAASK,MACpCE,iBAASR,8BACHJ,EAASW,SACN,IAAIL,4DAA4DI,gBAAiBC,MAAUA,OAG9FJ,OAAOM,UAAUC,eAAeC,KAAKJ,EAAQ,iBAC1C,IAAIL,sBAAsBI,gCAG7BH,OAAOM,UAAUC,eAAeC,KAAKJ,EAAQ,qBAC1C,IAAIL,sBAAsBI,gCAG1BM,uBACmB,iBAAhBA,QACH,IAAIV,sBAAsBI,0CAA2CM,MAAeA,OAGvFT,OAAOM,UAAUC,eAAeC,KAAKJ,EAAQ,mBAC1C,IAAIL,sBAAsBI,8BAG1BO,qBACiB,mBAAdA,QACH,IAAIX,sBAAsBI,0CAA2CO,MAAaA,MAIzFjB,EAASkB,SACN,IAAIZ,qFACmEY,MAAeA,WAI1EC,IAAhBC,GAAoD,iBAAhBA,QAChC,IAAId,iEAAiEc,MAAeA,WAGzED,IAAfE,GAAkD,iBAAfA,QAC/B,IAAIf,gEAAgEe,MAAcA,OAGpFC,EAAa,OAEdC,IAAMC,KAAcnB,EAAU,OACWA,EAASmB,gDAErDF,EAAWE,GAAcC,EAErBlB,OAAOM,UAAUC,eAAeC,KAAKG,EAAaM,GAAa,KAC3DE,EAAYR,EAAYM,GAE1BP,EAAUS,GACZJ,EAAWE,GAAcE,EAGzBC,QAAQC,KACNR,cACYI,SAAiBR,kBAA2BU,MAAaA,mCACxCD,MAC7BJ,WAMDC"}