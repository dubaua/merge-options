{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/hasProperty.js","webpack:///./src/utils/isObject.js","webpack:///./src/merge-options.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","hasProperty","isObject","Array","isArray","_mergeOptions","optionConfig","userOptions","preffix","suffix","strict","createMessage","message","join","mergedOptions","optionKey","optionPropertyConfig","required","_default","description","validator","userValue","isRequired","isUserOptionPassed","isValid","TypeError","console","warn","MESSAGE_PREFFIX","MESSAGE_SUFFIX","throwTypeError","OPTION_CONFIG","requiredType","default","x","mergeOptions","config","validConfig"],"mappings":"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","file":"merge-options.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","function hasProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\n\nexport default hasProperty;\n","function isObject(value) {\n  return value !== null && typeof value === 'object' && Array.isArray(value) === false;\n}\n\nexport default isObject;\n","import hasProperty from '@/utils/hasProperty.js';\n\n/**\n * @typedef {Object} Option\n * @property {boolean|function} required - a flag or function accepts userOptions\n * @property {*} default - default value for fallback if user option fail validation\n * @property {function} validator - function for validating user option. Accepts userValue as first argument and userOptions as second. Should return boolean value\n * @property {string} description - human readable validator description. Uses to compose an error message and warning\n */\n\n/**\n * Uses option configuration to iterate over passed user options.\n * Returns an object with user options passed validation and/or default not required values.\n * Throws an error for every missing required option.\n * Fallback to default value to every not required option.\n * If user value fails validation throws an error in strict mode or otherwise shows a warning message and fallback to default value.\n * All errors and warnings are verbose and composed based on description of options.\n * @param {Object} config - required configuration\n * @param {Object.<string, Option>} config.optionConfig - declarative option configuration\n * @param {Object} [config.userOptions={}] - user options needs validation before merge\n * @param {string} [config.preffix=''] - string before an error or warning message\n * @param {string} [config.suffix=''] - string after an error or warning message\n * @param {boolean} [config.strict=true] - strict mode flag. Default = true.\n * In strict mode the function throws an error, when user option fails validaton.\n * Otherwise the function shows warning message and fallback to default value.\n * @return {Object} an object with all keys described in options with userOption values if they pass validation and/or default not required values.\n */\n\nfunction _mergeOptions({ optionConfig, userOptions = {}, preffix = '', suffix = '', strict = true }) {\n  const createMessage = (message) => [preffix, message, suffix].join(' ');\n\n  const mergedOptions = {};\n\n  // iterate over optionConfig to merge only options described in config\n  for (const optionKey in optionConfig) {\n    if (hasProperty(optionConfig, optionKey)) {\n      const optionPropertyConfig = optionConfig[optionKey];\n      const { required, default: _default, description, validator } = optionPropertyConfig;\n      const userValue = userOptions[optionKey];\n\n      // required can be function\n      const isRequired = hasProperty(optionPropertyConfig, 'required')\n        ? typeof required === 'function'\n          ? required(userOptions)\n          : required\n        : false;\n\n      const isUserOptionPassed = hasProperty(userOptions, optionKey);\n\n      const isValid = validator(userValue, userOptions);\n\n      if (isRequired) {\n        if (isUserOptionPassed) {\n          if (isValid) {\n            mergedOptions[optionKey] = userValue;\n          } else {\n            throw new TypeError(\n              createMessage(`Expected ${optionKey} to be ${description}, got ${typeof userValue} ${userValue}.`),\n            );\n          }\n        } else {\n          throw new TypeError(createMessage(`${optionKey} is required.`));\n        }\n      } else {\n        mergedOptions[optionKey] = _default;\n        if (isUserOptionPassed) {\n          if (isValid) {\n            mergedOptions[optionKey] = userValue;\n          } else {\n            if (strict) {\n              throw new TypeError(\n                createMessage(`Expected ${optionKey} to be ${description}, got ${typeof userValue} ${userValue}.`),\n              );\n            } else {\n              console.warn(\n                createMessage(\n                  `Expected ${optionKey} to be ${description}, got ${typeof userValue} ${userValue}. Fallback to default value ${_default}.`,\n                ),\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return mergedOptions;\n}\n\nexport default _mergeOptions;\n","import hasProperty from '@/utils/hasProperty.js';\nimport isObject from '@/utils/isObject.js';\nimport _mergeOptions from '@/merge-options.js';\n\nconst MESSAGE_PREFFIX = '[mergeOptions]:';\nconst MESSAGE_SUFFIX = '\\nCheck out documentation https://github.com/dubaua/merge-options#parameters-and-return';\n\nfunction throwTypeError(message) {\n  throw new TypeError([MESSAGE_PREFFIX, message, MESSAGE_SUFFIX].join(' '));\n}\n\nfunction optionConfigValidator(optionConfig) {\n  for (const key in optionConfig) {\n    if (hasProperty(optionConfig, key)) {\n      const optionPropertyConfig = optionConfig[key];\n\n      if (!isObject(optionPropertyConfig)) {\n        throwTypeError(\n          `Expected optionConfig.${key} to be an object with declarative option configuration, got ${typeof optionPropertyConfig} ${optionPropertyConfig}.`,\n        );\n      }\n\n      if (hasProperty(optionPropertyConfig, 'required')) {\n        const required = optionPropertyConfig.required;\n        const requiredType = typeof required;\n        if (!(requiredType === 'boolean' || requiredType === 'function')) {\n          throwTypeError(\n            `Expected optionConfig.${key}.required to be either boolean or function, got ${typeof required} ${required}.`,\n          );\n        }\n      } else {\n        if (!hasProperty(optionPropertyConfig, 'default')) {\n          throwTypeError(`Expected optionConfig.${key} to either have required or default value.`);\n        }\n      }\n\n      if (!hasProperty(optionPropertyConfig, 'default') && !hasProperty(optionPropertyConfig, 'required')) {\n        throwTypeError(`Expected optionConfig.${key} to either have required or default value.`);\n      }\n\n      if (hasProperty(optionPropertyConfig, 'description')) {\n        const description = optionPropertyConfig.description;\n        if (typeof optionPropertyConfig.description !== 'string') {\n          throwTypeError(\n            `Expected optionConfig.${key}.description to be a string, got ${typeof description} ${description}.`,\n          );\n        }\n      } else {\n        throwTypeError(`Missing description on optionConfig.${key} config.`);\n      }\n\n      if (hasProperty(optionPropertyConfig, 'validator')) {\n        const validator = optionPropertyConfig.validator;\n        if (typeof optionPropertyConfig.validator !== 'function') {\n          throwTypeError(\n            `Expected optionConfig.${key}.validator to be a function, got ${typeof validator} ${validator}.`,\n          );\n        }\n      } else {\n        throwTypeError(`Missing validator on optionConfig.${key} config.`);\n      }\n    }\n  }\n  return isObject(optionConfig);\n}\n\nconst OPTION_CONFIG = {\n  optionConfig: {\n    required: true,\n    validator: optionConfigValidator,\n    description: 'an object with declarative option configuration',\n  },\n  userOptions: {\n    required: false,\n    default: {},\n    validator: isObject,\n    description: 'an object',\n  },\n  preffix: {\n    required: false,\n    default: '',\n    validator: (x) => typeof x === 'string',\n    description: 'a string',\n  },\n  suffix: {\n    required: false,\n    default: '',\n    validator: (x) => typeof x === 'string',\n    description: 'a string',\n  },\n  strict: {\n    required: false,\n    default: true,\n    validator: (x) => typeof x === 'boolean',\n    description: 'a boolean',\n  },\n};\n\n/**\n * @typedef {Object} Option\n * @property {boolean|function} required - a flag or function accepts userOptions\n * @property {*} default - default value for fallback if user option fail validation\n * @property {function} validator - function for validating user option. Accepts userValue as first argument and userOptions as second. Should return boolean value\n * @property {string} description - human readable validator description. Uses to compose an error message and warning\n */\n\n/**\n * Uses option configuration to iterate over passed user options.\n * Returns an object with user options passed validation and/or default not required values.\n * Throws an error for every missing required option.\n * Fallback to default value to every not required option.\n * If user value fails validation throws an error in strict mode or otherwise shows a warning message and fallback to default value.\n * All errors and warnings are verbose and composed based on description of options.\n * @param {Object} config - required configuration\n * @param {Object.<string, Option>} config.optionConfig - declarative option configuration\n * @param {Object} [config.userOptions={}] - user options needs validation before merge\n * @param {string} [config.preffix=''] - string before an error or warning message\n * @param {string} [config.suffix=''] - string after an error or warning message\n * @param {boolean} [config.strict=true] - strict mode flag. Default = true\n * In strict mode the function throws an error, when user option fails validaton.\n * Otherwise the function shows warning message and fallback to default value.\n * @return {Object} an object with all keys described in options with userOption values if they pass validation and/or default not required values.\n */\n\nfunction mergeOptions(config) {\n  const validConfig = _mergeOptions({\n    optionConfig: OPTION_CONFIG,\n    userOptions: config,\n    preffix: MESSAGE_PREFFIX,\n    suffix: MESSAGE_SUFFIX,\n  });\n  return _mergeOptions(validConfig);\n}\n\nexport default mergeOptions;\n"],"sourceRoot":""}