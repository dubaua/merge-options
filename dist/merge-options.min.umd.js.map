{"version":3,"file":"merge-options.min.umd.js","sources":["../merge-options.js"],"sourcesContent":["function isObject(value) {\r\n  return value !== null && typeof value === 'object' && Array.isArray(value) === false;\r\n}\r\n\r\n/**\r\n * @typedef {Object} DefaultOption\r\n * @property {*} initial - Initial value for fallback if user option fail validation\r\n * @property {string} description - Validator description for human\r\n * @property {function} validator - Function for validating user option. Should return boolean value\r\n */\r\n\r\n/**\r\n * @typedef {Object} requiredArguments\r\n * @property {Object} options - user options needs validation before merge\r\n * @property {Object.<string, DefaultOption>} defaults - default options object each key contains an object with initial value, validator and description\r\n * @property {Object} target - target object in which default and user options will be merged\r\n * @property {String} [warnPreffix] - string before warning message, useful to pass name of tool\r\n * @property {String} [warnSuffix] - string after warning message, useful to pass link to documentation\r\n */\r\n\r\n/**\r\n * Merges given user options passed validation and defaults to target object\r\n * Shows warning if given option is invalid\r\n * @param {...requiredArguments} config - confuguration object\r\n */\r\n\r\nfunction mergeOptions({ options = {}, defaults, target, warnPreffix = '', warnSuffix = '' }) {\r\n  // validating user input\r\n  if (!isObject(options)) {\r\n    throw new TypeError(`options is required and should be an object, got ${typeof options} ${options}.`);\r\n  }\r\n\r\n  if (!isObject(defaults)) {\r\n    throw new TypeError(`defaults is required and should be an object, got ${typeof defaults} ${defaults}.`);\r\n  }\r\n\r\n  Object.keys(defaults)\r\n    .map(key => defaults[key])\r\n    .forEach(option => {\r\n      if (!isObject(option)) {\r\n        throw new TypeError(`default option should be an object, got ${typeof option} ${option}.`);\r\n      }\r\n\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'initial')) {\r\n        throw new TypeError(`default options should have initial value`);\r\n      }\r\n\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'description')) {\r\n        throw new TypeError(`default options should have description`);\r\n      }\r\n\r\n      if (typeof option.description !== 'string') {\r\n        throw new TypeError(\r\n          `default option description should be a string, got ${typeof option.description} ${option.description}`\r\n        );\r\n      }\r\n\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'validator')) {\r\n        throw new TypeError(`default options should have validator function`);\r\n      }\r\n\r\n      if (typeof option.validator !== 'function') {\r\n        throw new TypeError(\r\n          `default option validator should be a function, got ${typeof option.validator} ${option.validator}`\r\n        );\r\n      } else {\r\n        // testing validator for primitive data\r\n        const dummies = [\r\n          true,\r\n          false,\r\n          0,\r\n          1,\r\n          Math.PI,\r\n          -Infinity,\r\n          NaN,\r\n          undefined,\r\n          null,\r\n          '',\r\n          'a cabbage',\r\n          'печенюха',\r\n          [42, 1e3],\r\n          { foo: 'bar' },\r\n        ];\r\n        for (let i = 0; i < dummies.length; i++) {\r\n          const dummy = dummies[i];\r\n          const validationResult = option.validator(dummy);\r\n          if (typeof validationResult !== 'boolean') {\r\n            throw new TypeError(\r\n              `default option validator should return boolean, got ${typeof validationResult} when ${validationResult} passed`\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n  if (!isObject(target)) {\r\n    throw new TypeError(`target is required and should be an object, got ${typeof target} ${target}.`);\r\n  }\r\n\r\n  if (warnPreffix !== undefined && typeof warnPreffix !== 'string') {\r\n    throw new TypeError(`warnPreffix should be a string, got ${typeof warnPreffix} ${warnPreffix}.`);\r\n  }\r\n\r\n  if (warnSuffix !== undefined && typeof warnSuffix !== 'string') {\r\n    throw new TypeError(`warnSuffix should be a string, got ${typeof warnSuffix} ${warnSuffix}.`);\r\n  }\r\n\r\n  // iterate over defaults to merge only trusted options\r\n  for (const key in defaults) {\r\n    const { initial, description, validator } = defaults[key];\r\n    // assing initial value first\r\n    target[key] = initial;\r\n    // if this option passed\r\n    if (Object.prototype.hasOwnProperty.call(options, key)) {\r\n      const value = options[key];\r\n      // if option valid, reassign it\r\n      if (validator(value)) {\r\n        target[key] = value;\r\n      } else {\r\n        // otherwise print what's wrong ang give clues\r\n        console.warn(\r\n          `${warnPreffix}Expected ${key} is ${description}, got %c${typeof value}`,\r\n          'font-style: italic; text-transform: capitalize',\r\n          `${value}. Fallback to default value ${initial}.`,\r\n          warnSuffix\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default mergeOptions;\r\n"],"names":["isObject","value","Array","isArray","ref","options","TypeError","defaults","Object","keys","map","key","forEach","option","prototype","hasOwnProperty","call","description","validator","dummies","Math","PI","Infinity","NaN","undefined","foo","i","length","validationResult","target","warnPreffix","warnSuffix","const","initial","console","warn"],"mappings":"wLAAA,SAASA,EAASC,UACC,OAAVA,GAAmC,iBAAVA,IAA+C,IAAzBC,MAAMC,QAAQF,UAyBtE,SAAsBG,kCAAY,+DAAoC,yCAAiB,KAEhFJ,EAASK,SACN,IAAIC,qEAAqED,MAAWA,WAGvFL,EAASO,SACN,IAAID,sEAAsEC,MAAYA,UAG9FC,OAAOC,KAAKF,GACTG,aAAIC,UAAOJ,EAASI,KACpBC,iBAAQC,OACFb,EAASa,SACN,IAAIP,4DAA4DO,MAAUA,WAG7EL,OAAOM,UAAUC,eAAeC,KAAKH,EAAQ,iBAC1C,IAAIP,UAAW,iDAGlBE,OAAOM,UAAUC,eAAeC,KAAKH,EAAQ,qBAC1C,IAAIP,UAAW,8CAGW,iBAAvBO,EAAOI,kBACV,IAAIX,uEACqDO,EAAOI,gBAAeJ,EAAmB,iBAIrGL,OAAOM,UAAUC,eAAeC,KAAKH,EAAQ,mBAC1C,IAAIP,UAAW,qDAGS,mBAArBO,EAAOK,gBACV,IAAIZ,uEACqDO,EAAOK,cAAaL,EAAiB,mBAI9FM,EAAU,EACd,GACA,EACA,EACA,EACAC,KAAKC,IACJC,SACDC,SACAC,EACA,KACA,GACA,YACA,WACA,CAAC,GAAI,KACL,CAAEC,IAAK,QAEAC,EAAI,EAAGA,EAAIP,EAAQQ,OAAQD,IAAK,KAEjCE,EAAmBf,EAAOK,UADlBC,EAAQO,OAEU,kBAArBE,QACH,IAAItB,wEACsDsB,WAAyBA,iBAO9F5B,EAAS6B,SACN,IAAIvB,oEAAoEuB,MAAUA,eAGtEL,IAAhBM,GAAoD,iBAAhBA,QAChC,IAAIxB,wDAAwDwB,MAAeA,eAGhEN,IAAfO,GAAkD,iBAAfA,QAC/B,IAAIzB,uDAAuDyB,MAAcA,WAI5EC,IAAMrB,KAAOJ,EAAU,OACkBA,EAASI,gDAErDkB,EAAOlB,GAAOsB,EAEVzB,OAAOM,UAAUC,eAAeC,KAAKX,EAASM,GAAM,KAChDV,EAAQI,EAAQM,GAElBO,EAAUjB,GACZ4B,EAAOlB,GAAOV,EAGdiC,QAAQC,KACHL,cAAuBnB,SAAUM,oBAA6BhB,EACjE,iDACGA,iCAAoCgC,MACvCF"}